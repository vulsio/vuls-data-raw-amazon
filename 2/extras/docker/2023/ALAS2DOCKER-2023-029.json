{
	"ID": "ALAS2DOCKER-2023-029",
	"Author": "linux-security@amazon.com",
	"From": "linux-security@amazon.com",
	"Status": "final",
	"Type": "security",
	"Version": "1.4",
	"Title": "Amazon Linux 2 - Docker 2.0 - ALAS2DOCKER-2023-029: important priority package update for containerd",
	"Issued": {
		"Date": "2023-08-17 17:04"
	},
	"Updated": {
		"Date": "2023-08-23 00:12"
	},
	"Severity": "important",
	"Description": "Package updates are available for Amazon Linux 2 - Docker that fix the following vulnerabilities:\nCVE-2023-29406:\n\tThe HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.\n\nCVE-2023-29403:\n\tOn Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.\n\nCVE-2023-29400:\n\thtml/template: improper handling of empty HTML attributes.\n\nTemplates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input could result in output that would have unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.\n\nCVE-2023-24540:\n\thtml/template: improper handling of JavaScript whitespace.\n\nNot all valid JavaScript whitespace characters were considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.\n\nCVE-2023-24539:\n\thtml/template: improper sanitization of CSS values\n\nAngle brackets (<>) were not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character could result in unexpectedly closing the CSS context and allowing for injection of unexpected HMTL, if executed with untrusted input.\n\nCVE-2023-24538:\n\tTemplates did not properly consider backticks (`) as Javascript string delimiters, and as such did\nnot escape them as expected. Backticks are used, since ES6, for JS template literals. If a template\ncontained a Go template action within a Javascript template literal, the contents of the action could\nbe used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nCVE-2023-24537:\n\tCalling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.\n\nCVE-2023-24536:\n\tMultipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.\n\nCVE-2023-24534:\n\tHTTP and MIME header parsing could allocate large amounts of memory, even when parsing small inputs.\n\nCertain unusual patterns of input data could cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nCVE-2023-24532:\n\tThe ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.\n\nCVE-2022-41725:\n\tGolang: net/http, mime/multipart: denial of service from excessive resource consumption (https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E)\n\nCVE-2022-41724:\n\tLarge handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert).\n\nCVE-2022-41723:\n\thttp2/hpack: avoid quadratic complexity in hpack decoding\n",
	"References": {
		"Reference": [
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41723",
				"ID": "CVE-2022-41723",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41724",
				"ID": "CVE-2022-41724",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41725",
				"ID": "CVE-2022-41725",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24532",
				"ID": "CVE-2023-24532",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24534",
				"ID": "CVE-2023-24534",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24536",
				"ID": "CVE-2023-24536",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24537",
				"ID": "CVE-2023-24537",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24538",
				"ID": "CVE-2023-24538",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24539",
				"ID": "CVE-2023-24539",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24540",
				"ID": "CVE-2023-24540",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-29400",
				"ID": "CVE-2023-29400",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-29403",
				"ID": "CVE-2023-29403",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-29406",
				"ID": "CVE-2023-29406",
				"Title": "",
				"Type": "cve"
			}
		]
	},
	"Pkglist": {
		"Collection": {
			"Short": "amazon-linux-2---docker",
			"Name": "Amazon Linux 2 - Docker",
			"Package": [
				{
					"Arch": "x86_64",
					"Epoch": "0",
					"Name": "containerd",
					"Release": "1.amzn2.0.2",
					"Version": "1.6.19",
					"Filename": "Packages/containerd-1.6.19-1.amzn2.0.2.x86_64.rpm"
				},
				{
					"Arch": "x86_64",
					"Epoch": "0",
					"Name": "containerd-stress",
					"Release": "1.amzn2.0.2",
					"Version": "1.6.19",
					"Filename": "Packages/containerd-stress-1.6.19-1.amzn2.0.2.x86_64.rpm"
				},
				{
					"Arch": "x86_64",
					"Epoch": "0",
					"Name": "containerd-debuginfo",
					"Release": "1.amzn2.0.2",
					"Version": "1.6.19",
					"Filename": "Packages/containerd-debuginfo-1.6.19-1.amzn2.0.2.x86_64.rpm"
				},
				{
					"Arch": "aarch64",
					"Epoch": "0",
					"Name": "containerd",
					"Release": "1.amzn2.0.2",
					"Version": "1.6.19",
					"Filename": "Packages/containerd-1.6.19-1.amzn2.0.2.aarch64.rpm"
				},
				{
					"Arch": "aarch64",
					"Epoch": "0",
					"Name": "containerd-stress",
					"Release": "1.amzn2.0.2",
					"Version": "1.6.19",
					"Filename": "Packages/containerd-stress-1.6.19-1.amzn2.0.2.aarch64.rpm"
				},
				{
					"Arch": "aarch64",
					"Epoch": "0",
					"Name": "containerd-debuginfo",
					"Release": "1.amzn2.0.2",
					"Version": "1.6.19",
					"Filename": "Packages/containerd-debuginfo-1.6.19-1.amzn2.0.2.aarch64.rpm"
				}
			]
		}
	}
}
