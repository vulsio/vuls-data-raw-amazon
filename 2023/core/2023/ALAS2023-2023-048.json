{
	"ID": "ALAS2023-2023-048",
	"Author": "linux-security@amazon.com",
	"From": "linux-security@amazon.com",
	"Status": "final",
	"Type": "security",
	"Version": "1.4",
	"Title": "Amazon Linux 2023 - ALAS2023-2023-048: Important priority package update for golang",
	"Issued": {
		"Date": "2023-02-17 20:45:00"
	},
	"Updated": {
		"Date": "2023-12-06 07:45:00"
	},
	"Severity": "Important",
	"Description": "Package updates are available for Amazon Linux 2023 that fix the following vulnerabilities:\nCVE-2022-41716:\n\tDue to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string A=Bx00C=D sets the variables A=B and C=D.\n\nCVE-2022-41715:\n\tPrograms which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.\n\nCVE-2022-32190:\n\tJoinPath and URL.JoinPath do not remove ../ path elements appended to a relative path. For example, JoinPath(\"https://go.dev\", \"../go\") returns the URL \"https://go.dev/../go\", despite the JoinPath documentation stating that ../ path elements are removed from the result.\n\nCVE-2022-32189:\n\tAn uncontrolled resource consumption flaw was found in Golang math/big. A too-short encoded message can cause a panic in Float.GobDecode and Rat.GobDecode in math/big in Go, potentially allowing an attacker to create a denial of service, impacting availability.\n\nCVE-2022-32148:\n\tImproper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.\n\nCVE-2022-30635:\n\tA flaw was found in golang. When calling Decoder.Decode on a message that contains deeply nested structures, a panic can occur due to stack exhaustion and allows an attacker to impact system availability.\n\nCVE-2022-30633:\n\tUncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the any field tag.\n\nCVE-2022-30632:\n\tA flaw was found in golang. Calling Glob on a path that contains a large number of path separators can cause a panic issue due to stack exhaustion. This can cause an attacker to impact availability.\n\nCVE-2022-30631:\n\tA flaw was found in golang. Calling the Reader.Read method on an archive that contains a large number of concatenated 0-length compressed files can cause a panic issue due to stack exhaustion.\n\nCVE-2022-30630:\n\tA flaw was found in the golang standard library, io/fs. Calling Glob on a path that contains a large number of path separators can cause a panic issue due to stack exhaustion. This could allow an attacker to impact availability.\n\nCVE-2022-30629:\n\tNon-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.\n\nCVE-2022-29526:\n\tA flaw was found in the syscall.Faccessat function when calling a process by checking the group. This flaw allows an attacker to check the process group permissions rather than a member of the file's group, affecting system availability.\n\nCVE-2022-2879:\n\tReader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.\n\nCVE-2022-28327:\n\tAn integer overflow flaw was found in Golang's crypto/elliptic library. This flaw allows an attacker to use a crafted scaler input longer than 32 bytes, causing P256().ScalarMult or P256().ScalarBaseMult to panic, leading to a loss of availability.\n\nCVE-2022-28131:\n\tA flaw was found in golang encoding/xml. When calling Decoder.Skip while parsing a deeply nested XML document, a panic can occur due to stack exhaustion and allows an attacker to impact system availability.\n\nCVE-2022-27664:\n\tIn net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.\n\nCVE-2022-27191:\n\tA broken cryptographic algorithm flaw was found in golang.org/x/crypto/ssh. This issue causes a client to fail authentification with RSA keys to servers that reject signature algorithms based on SHA-2, enabling an attacker to crash the server, resulting in a loss of availability.\n\nCVE-2022-24921:\n\tA stack overflow flaw was found in Golang's regexp module, which can crash the runtime if the application using regexp accepts very long or arbitrarily long regexps from untrusted sources that have sufficient nesting depths. To exploit this vulnerability, an attacker would need to send large regexps with deep nesting to the application. Triggering this flaw leads to a crash of the runtime, which causes a denial of service.\n\nCVE-2022-24675:\n\tA buffer overflow flaw was found in Golang's library encoding/pem. This flaw allows an attacker to use a large PEM input (more than 5 MB) ), causing a stack overflow in Decode, which leads to a loss of availability.\n\nCVE-2022-23806:\n\tA flaw was found in the elliptic package of the crypto library in golang when the IsOnCurve function could return true for invalid field elements. This flaw allows an attacker to take advantage of this undefined behavior, affecting the availability and integrity of the resource.\n\nCVE-2022-23773:\n\tcmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.\n\nCVE-2022-23772:\n\tRat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.\n\nCVE-2022-1962:\n\tA flaw was found in the golang standard library, go/parser. When calling any Parse functions on the Go source code, which contains deeply nested types or declarations, a panic can occur due to stack exhaustion. This issue allows an attacker to impact system availability.\n\nCVE-2022-1705:\n\tA flaw was found in golang. The HTTP/1 client accepted invalid Transfer-Encoding headers indicating \"chunked\" encoding. This issue could allow request smuggling, but only if combined with an intermediate server that also improperly accepts the header as invalid.\n\nCVE-2021-44717:\n\tThere's a flaw in golang's syscall.ForkExec() interface. An attacker who manages to first cause a file descriptor exhaustion for the process, then cause syscall.ForkExec() to be called repeatedly, could compromise data integrity and/or confidentiality in a somewhat uncontrolled way in programs linked with and using syscall.ForkExec().\n\nCVE-2021-44716:\n\tThere's an uncontrolled resource consumption flaw in golang's net/http library in the canonicalHeader() function. An attacker who submits specially crafted requests to applications linked with net/http's http2 functionality could cause excessive resource consumption that could lead to a denial of service or otherwise impact to system performance and resources.\n\nCVE-2021-41772:\n\tA vulnerability was found in archive/zip of the Go standard library. Applications written in Go where Reader.Open (the API implementing io/fs.FS introduced in Go 1.16) can panic when parsing a crafted ZIP archive containing completely invalid names or an empty filename argument.\n\nCVE-2021-41771:\n\tAn out of bounds read vulnerability was found in debug/macho of the Go standard library. When using the debug/macho standard library (stdlib) and malformed binaries are parsed using Open or OpenFat, it can cause golang to attempt to read outside of a slice (array) causing a panic when calling ImportedSymbols. An attacker can use this vulnerability to craft a file which causes an application using this library to crash resulting in a denial of service.\n\nCVE-2021-38297:\n\tA validation flaw was found in golang. When invoking functions from WASM modules built using GOARCH=wasm GOOS=js, passing very large arguments can cause portions of the module to be overwritten with data from the arguments. The highest threat from this vulnerability is to integrity.\n\nCVE-2021-33196:\n\tA vulnerability was found in archive/zip of the Go standard library. Applications written in Go can panic or potentially exhaust system memory when parsing malformed ZIP files.\n",
	"References": {
		"Reference": [
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-33196",
				"ID": "CVE-2021-33196",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-38297",
				"ID": "CVE-2021-38297",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41771",
				"ID": "CVE-2021-41771",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41772",
				"ID": "CVE-2021-41772",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44716",
				"ID": "CVE-2021-44716",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44717",
				"ID": "CVE-2021-44717",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-1705",
				"ID": "CVE-2022-1705",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-1962",
				"ID": "CVE-2022-1962",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23772",
				"ID": "CVE-2022-23772",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23773",
				"ID": "CVE-2022-23773",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23806",
				"ID": "CVE-2022-23806",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24675",
				"ID": "CVE-2022-24675",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24921",
				"ID": "CVE-2022-24921",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-27191",
				"ID": "CVE-2022-27191",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-27664",
				"ID": "CVE-2022-27664",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-28131",
				"ID": "CVE-2022-28131",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-28327",
				"ID": "CVE-2022-28327",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-2879",
				"ID": "CVE-2022-2879",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29526",
				"ID": "CVE-2022-29526",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30629",
				"ID": "CVE-2022-30629",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30630",
				"ID": "CVE-2022-30630",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30631",
				"ID": "CVE-2022-30631",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30632",
				"ID": "CVE-2022-30632",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30633",
				"ID": "CVE-2022-30633",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30635",
				"ID": "CVE-2022-30635",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-32148",
				"ID": "CVE-2022-32148",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-32189",
				"ID": "CVE-2022-32189",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-32190",
				"ID": "CVE-2022-32190",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41715",
				"ID": "CVE-2022-41715",
				"Title": "",
				"Type": "cve"
			},
			{
				"Href": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41716",
				"ID": "CVE-2022-41716",
				"Title": "",
				"Type": "cve"
			}
		]
	},
	"Pkglist": {
		"Collection": {
			"Short": "amazon-linux-2023",
			"Name": "Amazon Linux 2023",
			"Package": [
				{
					"Arch": "noarch",
					"Epoch": "0",
					"Name": "golang-docs",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-docs-1.19.3-2.amzn2023.0.2.noarch.rpm"
				},
				{
					"Arch": "x86_64",
					"Epoch": "0",
					"Name": "golang",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-1.19.3-2.amzn2023.0.2.x86_64.rpm"
				},
				{
					"Arch": "x86_64",
					"Epoch": "0",
					"Name": "golang-race",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-race-1.19.3-2.amzn2023.0.2.x86_64.rpm"
				},
				{
					"Arch": "x86_64",
					"Epoch": "0",
					"Name": "golang-bin",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-bin-1.19.3-2.amzn2023.0.2.x86_64.rpm"
				},
				{
					"Arch": "noarch",
					"Epoch": "0",
					"Name": "golang-misc",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-misc-1.19.3-2.amzn2023.0.2.noarch.rpm"
				},
				{
					"Arch": "x86_64",
					"Epoch": "0",
					"Name": "golang-shared",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-shared-1.19.3-2.amzn2023.0.2.x86_64.rpm"
				},
				{
					"Arch": "noarch",
					"Epoch": "0",
					"Name": "golang-src",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-src-1.19.3-2.amzn2023.0.2.noarch.rpm"
				},
				{
					"Arch": "noarch",
					"Epoch": "0",
					"Name": "golang-tests",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-tests-1.19.3-2.amzn2023.0.2.noarch.rpm"
				},
				{
					"Arch": "i686",
					"Epoch": "0",
					"Name": "golang-shared",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-shared-1.19.3-2.amzn2023.0.2.i686.rpm"
				},
				{
					"Arch": "i686",
					"Epoch": "0",
					"Name": "golang-bin",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-bin-1.19.3-2.amzn2023.0.2.i686.rpm"
				},
				{
					"Arch": "i686",
					"Epoch": "0",
					"Name": "golang",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-1.19.3-2.amzn2023.0.2.i686.rpm"
				},
				{
					"Arch": "aarch64",
					"Epoch": "0",
					"Name": "golang",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-1.19.3-2.amzn2023.0.2.aarch64.rpm"
				},
				{
					"Arch": "aarch64",
					"Epoch": "0",
					"Name": "golang-bin",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-bin-1.19.3-2.amzn2023.0.2.aarch64.rpm"
				},
				{
					"Arch": "aarch64",
					"Epoch": "0",
					"Name": "golang-shared",
					"Release": "2.amzn2023.0.2",
					"Version": "1.19.3",
					"Filename": "Packages/golang-shared-1.19.3-2.amzn2023.0.2.aarch64.rpm"
				}
			]
		}
	}
}
